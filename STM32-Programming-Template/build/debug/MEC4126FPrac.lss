
build/debug/MEC4126FPrac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000046c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800052c  0800052c  0000152c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800053c  0800053c  0000153c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000540  08000540  00001540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00001544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000544  00002000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000001c  08000544  0000201c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY
  9 .comment      00000038  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000086f  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000400  00000000  00000000  00001e13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000001f4  00000000  00000000  00002213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000100  00000000  00000000  00002408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000000ab  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00000b71  00000000  00000000  000025b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000003b6  00000000  00000000  00003124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000017c  00000000  00000000  000034dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000069  00000000  00000000  00003658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000514 	.word	0x08000514

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000514 	.word	0x08000514

08000108 <delay>:
//====================================================================
// DESCRIPTION: A delay used by the LCD functions.
//====================================================================

void delay(unsigned int microseconds)
{
 8000108:	b082      	sub	sp, #8
	  volatile unsigned int counter;
	  microseconds *= 3;
 800010a:	0043      	lsls	r3, r0, #1
 800010c:	1818      	adds	r0, r3, r0
	  for(counter = 0; counter<microseconds; counter++)
 800010e:	2300      	movs	r3, #0
 8000110:	9301      	str	r3, [sp, #4]
 8000112:	e004      	b.n	800011e <delay+0x16>
	  {
	    __asm("nop");
 8000114:	46c0      	nop			@ (mov r8, r8)
	    __asm("nop");
 8000116:	46c0      	nop			@ (mov r8, r8)
	  for(counter = 0; counter<microseconds; counter++)
 8000118:	9b01      	ldr	r3, [sp, #4]
 800011a:	3301      	adds	r3, #1
 800011c:	9301      	str	r3, [sp, #4]
 800011e:	9b01      	ldr	r3, [sp, #4]
 8000120:	4283      	cmp	r3, r0
 8000122:	d3f7      	bcc.n	8000114 <delay+0xc>
	  }
}
 8000124:	b002      	add	sp, #8
 8000126:	4770      	bx	lr

08000128 <pulse_strobe>:
{
 8000128:	b570      	push	{r4, r5, r6, lr}
    delay(20);				// Delay
 800012a:	2014      	movs	r0, #20
 800012c:	f7ff ffec 	bl	8000108 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// pull E (PC15) HIGH
 8000130:	4c0a      	ldr	r4, [pc, #40]	@ (800015c <pulse_strobe+0x34>)
 8000132:	69a3      	ldr	r3, [r4, #24]
 8000134:	2580      	movs	r5, #128	@ 0x80
 8000136:	022d      	lsls	r5, r5, #8
 8000138:	432b      	orrs	r3, r5
 800013a:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 800013c:	2014      	movs	r0, #20
 800013e:	f7ff ffe3 	bl	8000108 <delay>
    GPIOC->BSRR |= LCD_EN_RESET;	// Take EN LOW
 8000142:	69a2      	ldr	r2, [r4, #24]
 8000144:	2380      	movs	r3, #128	@ 0x80
 8000146:	061b      	lsls	r3, r3, #24
 8000148:	4313      	orrs	r3, r2
 800014a:	61a3      	str	r3, [r4, #24]
    delay(20);				// Delay
 800014c:	2014      	movs	r0, #20
 800014e:	f7ff ffdb 	bl	8000108 <delay>
    GPIOC->BSRR |= LCD_EN_SET;		// Take EN HIGH
 8000152:	69a3      	ldr	r3, [r4, #24]
 8000154:	431d      	orrs	r5, r3
 8000156:	61a5      	str	r5, [r4, #24]
}
 8000158:	bd70      	pop	{r4, r5, r6, pc}
 800015a:	46c0      	nop			@ (mov r8, r8)
 800015c:	48000800 	.word	0x48000800

08000160 <lcd_putchar>:
{
 8000160:	b510      	push	{r4, lr}
 8000162:	0004      	movs	r4, r0
	GPIOC->BSRR |= LCD_RS_SET;	// Register Select (RS) line HIGH (data sent will now be read as text);
 8000164:	4a45      	ldr	r2, [pc, #276]	@ (800027c <lcd_putchar+0x11c>)
 8000166:	6991      	ldr	r1, [r2, #24]
 8000168:	2380      	movs	r3, #128	@ 0x80
 800016a:	01db      	lsls	r3, r3, #7
 800016c:	430b      	orrs	r3, r1
 800016e:	6193      	str	r3, [r2, #24]
        if ((character & 0x80) != 0) 	// Select bit 7 of command, if HIGH set Data line 7 (D7)
 8000170:	b243      	sxtb	r3, r0
 8000172:	2b00      	cmp	r3, #0
 8000174:	db46      	blt.n	8000204 <lcd_putchar+0xa4>
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000176:	2290      	movs	r2, #144	@ 0x90
 8000178:	05d2      	lsls	r2, r2, #23
 800017a:	6991      	ldr	r1, [r2, #24]
 800017c:	2380      	movs	r3, #128	@ 0x80
 800017e:	061b      	lsls	r3, r3, #24
 8000180:	430b      	orrs	r3, r1
 8000182:	6193      	str	r3, [r2, #24]
        if ((character & 0x40) != 0)	// Select bit 6 of command, if HIGH set Data line 6 (D6)       
 8000184:	0663      	lsls	r3, r4, #25
 8000186:	d545      	bpl.n	8000214 <lcd_putchar+0xb4>
            GPIOA->BSRR |= LCD_D6_SET;
 8000188:	2290      	movs	r2, #144	@ 0x90
 800018a:	05d2      	lsls	r2, r2, #23
 800018c:	6991      	ldr	r1, [r2, #24]
 800018e:	2380      	movs	r3, #128	@ 0x80
 8000190:	015b      	lsls	r3, r3, #5
 8000192:	430b      	orrs	r3, r1
 8000194:	6193      	str	r3, [r2, #24]
        if ((character & 0x20) != 0)	// Select bit 5 of command, if HIGH set Data line 5 (D5)
 8000196:	06a3      	lsls	r3, r4, #26
 8000198:	d544      	bpl.n	8000224 <lcd_putchar+0xc4>
        	GPIOB->BSRR |= LCD_D5_SET;                 
 800019a:	4a39      	ldr	r2, [pc, #228]	@ (8000280 <lcd_putchar+0x120>)
 800019c:	6991      	ldr	r1, [r2, #24]
 800019e:	2380      	movs	r3, #128	@ 0x80
 80001a0:	009b      	lsls	r3, r3, #2
 80001a2:	430b      	orrs	r3, r1
 80001a4:	6193      	str	r3, [r2, #24]
        if ((character & 0x10) != 0)	// Select bit 4 of command, if HIGH set Data line 4 (D4) 
 80001a6:	06e3      	lsls	r3, r4, #27
 80001a8:	d543      	bpl.n	8000232 <lcd_putchar+0xd2>
        	GPIOB->BSRR |= LCD_D4_SET;
 80001aa:	4a35      	ldr	r2, [pc, #212]	@ (8000280 <lcd_putchar+0x120>)
 80001ac:	6991      	ldr	r1, [r2, #24]
 80001ae:	2380      	movs	r3, #128	@ 0x80
 80001b0:	005b      	lsls	r3, r3, #1
 80001b2:	430b      	orrs	r3, r1
 80001b4:	6193      	str	r3, [r2, #24]
        pulse_strobe ();		// Send data
 80001b6:	f7ff ffb7 	bl	8000128 <pulse_strobe>
        if ((character & 0x08) != 0)	// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80001ba:	0723      	lsls	r3, r4, #28
 80001bc:	d540      	bpl.n	8000240 <lcd_putchar+0xe0>
        	GPIOA->BSRR |= LCD_D7_SET;
 80001be:	2290      	movs	r2, #144	@ 0x90
 80001c0:	05d2      	lsls	r2, r2, #23
 80001c2:	6991      	ldr	r1, [r2, #24]
 80001c4:	2380      	movs	r3, #128	@ 0x80
 80001c6:	021b      	lsls	r3, r3, #8
 80001c8:	430b      	orrs	r3, r1
 80001ca:	6193      	str	r3, [r2, #24]
        if ((character & 0x04) != 0)	// Select bit 2 of command, if HIGH set Data line 6 (D6)         
 80001cc:	0763      	lsls	r3, r4, #29
 80001ce:	d53f      	bpl.n	8000250 <lcd_putchar+0xf0>
            GPIOA->BSRR |= LCD_D6_SET;
 80001d0:	2290      	movs	r2, #144	@ 0x90
 80001d2:	05d2      	lsls	r2, r2, #23
 80001d4:	6991      	ldr	r1, [r2, #24]
 80001d6:	2380      	movs	r3, #128	@ 0x80
 80001d8:	015b      	lsls	r3, r3, #5
 80001da:	430b      	orrs	r3, r1
 80001dc:	6193      	str	r3, [r2, #24]
        if ((character & 0x02) != 0)	// Select bit 1 of command, if HIGH set Data line 5 (D5)  
 80001de:	07a3      	lsls	r3, r4, #30
 80001e0:	d53e      	bpl.n	8000260 <lcd_putchar+0x100>
        	GPIOB->BSRR |= LCD_D5_SET;       
 80001e2:	4a27      	ldr	r2, [pc, #156]	@ (8000280 <lcd_putchar+0x120>)
 80001e4:	6991      	ldr	r1, [r2, #24]
 80001e6:	2380      	movs	r3, #128	@ 0x80
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	430b      	orrs	r3, r1
 80001ec:	6193      	str	r3, [r2, #24]
        if ((character & 0x01) != 0)	// Select bit 0 of command, if HIGH set Data line 4 (D4)
 80001ee:	07e4      	lsls	r4, r4, #31
 80001f0:	d53d      	bpl.n	800026e <lcd_putchar+0x10e>
        	GPIOB->BSRR |= LCD_D4_SET;
 80001f2:	4a23      	ldr	r2, [pc, #140]	@ (8000280 <lcd_putchar+0x120>)
 80001f4:	6991      	ldr	r1, [r2, #24]
 80001f6:	2380      	movs	r3, #128	@ 0x80
 80001f8:	005b      	lsls	r3, r3, #1
 80001fa:	430b      	orrs	r3, r1
 80001fc:	6193      	str	r3, [r2, #24]
        pulse_strobe();			// Send data
 80001fe:	f7ff ff93 	bl	8000128 <pulse_strobe>
}
 8000202:	bd10      	pop	{r4, pc}
        	GPIOA->BSRR |= LCD_D7_SET;
 8000204:	2290      	movs	r2, #144	@ 0x90
 8000206:	05d2      	lsls	r2, r2, #23
 8000208:	6991      	ldr	r1, [r2, #24]
 800020a:	2380      	movs	r3, #128	@ 0x80
 800020c:	021b      	lsls	r3, r3, #8
 800020e:	430b      	orrs	r3, r1
 8000210:	6193      	str	r3, [r2, #24]
 8000212:	e7b7      	b.n	8000184 <lcd_putchar+0x24>
            GPIOA->BSRR |= LCD_D6_RESET;
 8000214:	2290      	movs	r2, #144	@ 0x90
 8000216:	05d2      	lsls	r2, r2, #23
 8000218:	6991      	ldr	r1, [r2, #24]
 800021a:	2380      	movs	r3, #128	@ 0x80
 800021c:	055b      	lsls	r3, r3, #21
 800021e:	430b      	orrs	r3, r1
 8000220:	6193      	str	r3, [r2, #24]
 8000222:	e7b8      	b.n	8000196 <lcd_putchar+0x36>
        	GPIOB->BSRR |= LCD_D5_RESET;
 8000224:	4a16      	ldr	r2, [pc, #88]	@ (8000280 <lcd_putchar+0x120>)
 8000226:	6991      	ldr	r1, [r2, #24]
 8000228:	2380      	movs	r3, #128	@ 0x80
 800022a:	049b      	lsls	r3, r3, #18
 800022c:	430b      	orrs	r3, r1
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	e7b9      	b.n	80001a6 <lcd_putchar+0x46>
        	GPIOB->BSRR |= LCD_D4_RESET;
 8000232:	4a13      	ldr	r2, [pc, #76]	@ (8000280 <lcd_putchar+0x120>)
 8000234:	6991      	ldr	r1, [r2, #24]
 8000236:	2380      	movs	r3, #128	@ 0x80
 8000238:	045b      	lsls	r3, r3, #17
 800023a:	430b      	orrs	r3, r1
 800023c:	6193      	str	r3, [r2, #24]
 800023e:	e7ba      	b.n	80001b6 <lcd_putchar+0x56>
        	GPIOA->BSRR |= LCD_D7_RESET;
 8000240:	2290      	movs	r2, #144	@ 0x90
 8000242:	05d2      	lsls	r2, r2, #23
 8000244:	6991      	ldr	r1, [r2, #24]
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	430b      	orrs	r3, r1
 800024c:	6193      	str	r3, [r2, #24]
 800024e:	e7bd      	b.n	80001cc <lcd_putchar+0x6c>
            GPIOA->BSRR |= LCD_D6_RESET;
 8000250:	2290      	movs	r2, #144	@ 0x90
 8000252:	05d2      	lsls	r2, r2, #23
 8000254:	6991      	ldr	r1, [r2, #24]
 8000256:	2380      	movs	r3, #128	@ 0x80
 8000258:	055b      	lsls	r3, r3, #21
 800025a:	430b      	orrs	r3, r1
 800025c:	6193      	str	r3, [r2, #24]
 800025e:	e7be      	b.n	80001de <lcd_putchar+0x7e>
        	GPIOB->BSRR |= LCD_D5_RESET;
 8000260:	4a07      	ldr	r2, [pc, #28]	@ (8000280 <lcd_putchar+0x120>)
 8000262:	6991      	ldr	r1, [r2, #24]
 8000264:	2380      	movs	r3, #128	@ 0x80
 8000266:	049b      	lsls	r3, r3, #18
 8000268:	430b      	orrs	r3, r1
 800026a:	6193      	str	r3, [r2, #24]
 800026c:	e7bf      	b.n	80001ee <lcd_putchar+0x8e>
        	GPIOB->BSRR |= LCD_D4_RESET;
 800026e:	4a04      	ldr	r2, [pc, #16]	@ (8000280 <lcd_putchar+0x120>)
 8000270:	6991      	ldr	r1, [r2, #24]
 8000272:	2380      	movs	r3, #128	@ 0x80
 8000274:	045b      	lsls	r3, r3, #17
 8000276:	430b      	orrs	r3, r1
 8000278:	6193      	str	r3, [r2, #24]
 800027a:	e7c0      	b.n	80001fe <lcd_putchar+0x9e>
 800027c:	48000800 	.word	0x48000800
 8000280:	48000400 	.word	0x48000400

08000284 <lcd_putstring>:
{
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	0005      	movs	r5, r0
    unsigned char count = 0;
 8000288:	2400      	movs	r4, #0
    while (instring[count])		// Until the null terminator is reached
 800028a:	e003      	b.n	8000294 <lcd_putstring+0x10>
    	lcd_putchar(instring[count]);	// Write each character to LCD
 800028c:	f7ff ff68 	bl	8000160 <lcd_putchar>
	    count++;
 8000290:	3401      	adds	r4, #1
 8000292:	b2e4      	uxtb	r4, r4
    while (instring[count])		// Until the null terminator is reached
 8000294:	5d28      	ldrb	r0, [r5, r4]
 8000296:	2800      	cmp	r0, #0
 8000298:	d1f8      	bne.n	800028c <lcd_putstring+0x8>
}
 800029a:	bd70      	pop	{r4, r5, r6, pc}

0800029c <lcd_command>:
{
 800029c:	b510      	push	{r4, lr}
 800029e:	0004      	movs	r4, r0
    GPIOC->BSRR |= LCD_RS_RESET;	// Register Select (RS)line low (data sent will now be read as commands);
 80002a0:	4a47      	ldr	r2, [pc, #284]	@ (80003c0 <lcd_command+0x124>)
 80002a2:	6991      	ldr	r1, [r2, #24]
 80002a4:	2380      	movs	r3, #128	@ 0x80
 80002a6:	05db      	lsls	r3, r3, #23
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6193      	str	r3, [r2, #24]
    if ((command & 0x80) != 0)		// Select bit 7 of command, if HIGH set Data line 7 (D7) 
 80002ac:	b243      	sxtb	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db49      	blt.n	8000346 <lcd_command+0xaa>
    	GPIOA->BSRR |= LCD_D7_RESET;
 80002b2:	2290      	movs	r2, #144	@ 0x90
 80002b4:	05d2      	lsls	r2, r2, #23
 80002b6:	6991      	ldr	r1, [r2, #24]
 80002b8:	2380      	movs	r3, #128	@ 0x80
 80002ba:	061b      	lsls	r3, r3, #24
 80002bc:	430b      	orrs	r3, r1
 80002be:	6193      	str	r3, [r2, #24]
    if ((command & 0x40) != 0)		// Select bit 6 of command, if HIGH set Data line 6 (D6) 
 80002c0:	0663      	lsls	r3, r4, #25
 80002c2:	d548      	bpl.n	8000356 <lcd_command+0xba>
        GPIOA->BSRR |= LCD_D6_SET;
 80002c4:	2290      	movs	r2, #144	@ 0x90
 80002c6:	05d2      	lsls	r2, r2, #23
 80002c8:	6991      	ldr	r1, [r2, #24]
 80002ca:	2380      	movs	r3, #128	@ 0x80
 80002cc:	015b      	lsls	r3, r3, #5
 80002ce:	430b      	orrs	r3, r1
 80002d0:	6193      	str	r3, [r2, #24]
    if ((command & 0x20) != 0)		// Select bit 5 of command, if HIGH set Data line 5 (D5)
 80002d2:	06a3      	lsls	r3, r4, #26
 80002d4:	d547      	bpl.n	8000366 <lcd_command+0xca>
    	GPIOB->BSRR |= LCD_D5_SET;	
 80002d6:	4a3b      	ldr	r2, [pc, #236]	@ (80003c4 <lcd_command+0x128>)
 80002d8:	6991      	ldr	r1, [r2, #24]
 80002da:	2380      	movs	r3, #128	@ 0x80
 80002dc:	009b      	lsls	r3, r3, #2
 80002de:	430b      	orrs	r3, r1
 80002e0:	6193      	str	r3, [r2, #24]
    if ((command & 0x10) != 0)		// Select bit 4 of command, if HIGH set Data line 4 (D4)
 80002e2:	06e3      	lsls	r3, r4, #27
 80002e4:	d546      	bpl.n	8000374 <lcd_command+0xd8>
    	GPIOB->BSRR |= LCD_D4_SET;
 80002e6:	4a37      	ldr	r2, [pc, #220]	@ (80003c4 <lcd_command+0x128>)
 80002e8:	6991      	ldr	r1, [r2, #24]
 80002ea:	2380      	movs	r3, #128	@ 0x80
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	430b      	orrs	r3, r1
 80002f0:	6193      	str	r3, [r2, #24]
    pulse_strobe ();			// Send data
 80002f2:	f7ff ff19 	bl	8000128 <pulse_strobe>
    if ((command & 0x08) != 0)		// Select bit 3 of command, if HIGH set Data line 7 (D7) 
 80002f6:	0723      	lsls	r3, r4, #28
 80002f8:	d543      	bpl.n	8000382 <lcd_command+0xe6>
    	GPIOA->BSRR |= LCD_D7_SET;
 80002fa:	2290      	movs	r2, #144	@ 0x90
 80002fc:	05d2      	lsls	r2, r2, #23
 80002fe:	6991      	ldr	r1, [r2, #24]
 8000300:	2380      	movs	r3, #128	@ 0x80
 8000302:	021b      	lsls	r3, r3, #8
 8000304:	430b      	orrs	r3, r1
 8000306:	6193      	str	r3, [r2, #24]
    if ((command & 0x04) != 0)		// Select bit 2 of command, if HIGH set Data line 6 (D6)
 8000308:	0763      	lsls	r3, r4, #29
 800030a:	d542      	bpl.n	8000392 <lcd_command+0xf6>
        GPIOA->BSRR |= LCD_D6_SET;
 800030c:	2290      	movs	r2, #144	@ 0x90
 800030e:	05d2      	lsls	r2, r2, #23
 8000310:	6991      	ldr	r1, [r2, #24]
 8000312:	2380      	movs	r3, #128	@ 0x80
 8000314:	015b      	lsls	r3, r3, #5
 8000316:	430b      	orrs	r3, r1
 8000318:	6193      	str	r3, [r2, #24]
    if ((command & 0x02) != 0)		// Select bit 1 of command, if HIGH set Data line 5 (D5)
 800031a:	07a3      	lsls	r3, r4, #30
 800031c:	d541      	bpl.n	80003a2 <lcd_command+0x106>
    	GPIOB->BSRR |= LCD_D5_SET;         
 800031e:	4a29      	ldr	r2, [pc, #164]	@ (80003c4 <lcd_command+0x128>)
 8000320:	6991      	ldr	r1, [r2, #24]
 8000322:	2380      	movs	r3, #128	@ 0x80
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	430b      	orrs	r3, r1
 8000328:	6193      	str	r3, [r2, #24]
    if ((command & 0x01) != 0)		// Select bit 0 of command, if HIGH set Data line 4 (D4)
 800032a:	07e4      	lsls	r4, r4, #31
 800032c:	d540      	bpl.n	80003b0 <lcd_command+0x114>
    	GPIOB->BSRR |= LCD_D4_SET;
 800032e:	4a25      	ldr	r2, [pc, #148]	@ (80003c4 <lcd_command+0x128>)
 8000330:	6991      	ldr	r1, [r2, #24]
 8000332:	2380      	movs	r3, #128	@ 0x80
 8000334:	005b      	lsls	r3, r3, #1
 8000336:	430b      	orrs	r3, r1
 8000338:	6193      	str	r3, [r2, #24]
    pulse_strobe();			// Send data
 800033a:	f7ff fef5 	bl	8000128 <pulse_strobe>
    delay(3000);
 800033e:	4822      	ldr	r0, [pc, #136]	@ (80003c8 <lcd_command+0x12c>)
 8000340:	f7ff fee2 	bl	8000108 <delay>
}
 8000344:	bd10      	pop	{r4, pc}
    	GPIOA->BSRR |= LCD_D7_SET;
 8000346:	2290      	movs	r2, #144	@ 0x90
 8000348:	05d2      	lsls	r2, r2, #23
 800034a:	6991      	ldr	r1, [r2, #24]
 800034c:	2380      	movs	r3, #128	@ 0x80
 800034e:	021b      	lsls	r3, r3, #8
 8000350:	430b      	orrs	r3, r1
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	e7b4      	b.n	80002c0 <lcd_command+0x24>
        GPIOA->BSRR |= LCD_D6_RESET;
 8000356:	2290      	movs	r2, #144	@ 0x90
 8000358:	05d2      	lsls	r2, r2, #23
 800035a:	6991      	ldr	r1, [r2, #24]
 800035c:	2380      	movs	r3, #128	@ 0x80
 800035e:	055b      	lsls	r3, r3, #21
 8000360:	430b      	orrs	r3, r1
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	e7b5      	b.n	80002d2 <lcd_command+0x36>
    	GPIOB->BSRR |= LCD_D5_RESET;
 8000366:	4a17      	ldr	r2, [pc, #92]	@ (80003c4 <lcd_command+0x128>)
 8000368:	6991      	ldr	r1, [r2, #24]
 800036a:	2380      	movs	r3, #128	@ 0x80
 800036c:	049b      	lsls	r3, r3, #18
 800036e:	430b      	orrs	r3, r1
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	e7b6      	b.n	80002e2 <lcd_command+0x46>
    	GPIOB->BSRR |= LCD_D4_RESET;
 8000374:	4a13      	ldr	r2, [pc, #76]	@ (80003c4 <lcd_command+0x128>)
 8000376:	6991      	ldr	r1, [r2, #24]
 8000378:	2380      	movs	r3, #128	@ 0x80
 800037a:	045b      	lsls	r3, r3, #17
 800037c:	430b      	orrs	r3, r1
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	e7b7      	b.n	80002f2 <lcd_command+0x56>
    	GPIOA->BSRR |= LCD_D7_RESET;
 8000382:	2290      	movs	r2, #144	@ 0x90
 8000384:	05d2      	lsls	r2, r2, #23
 8000386:	6991      	ldr	r1, [r2, #24]
 8000388:	2380      	movs	r3, #128	@ 0x80
 800038a:	061b      	lsls	r3, r3, #24
 800038c:	430b      	orrs	r3, r1
 800038e:	6193      	str	r3, [r2, #24]
 8000390:	e7ba      	b.n	8000308 <lcd_command+0x6c>
        GPIOA->BSRR |= LCD_D6_RESET;
 8000392:	2290      	movs	r2, #144	@ 0x90
 8000394:	05d2      	lsls	r2, r2, #23
 8000396:	6991      	ldr	r1, [r2, #24]
 8000398:	2380      	movs	r3, #128	@ 0x80
 800039a:	055b      	lsls	r3, r3, #21
 800039c:	430b      	orrs	r3, r1
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	e7bb      	b.n	800031a <lcd_command+0x7e>
    	GPIOB->BSRR |= LCD_D5_RESET;
 80003a2:	4a08      	ldr	r2, [pc, #32]	@ (80003c4 <lcd_command+0x128>)
 80003a4:	6991      	ldr	r1, [r2, #24]
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	049b      	lsls	r3, r3, #18
 80003aa:	430b      	orrs	r3, r1
 80003ac:	6193      	str	r3, [r2, #24]
 80003ae:	e7bc      	b.n	800032a <lcd_command+0x8e>
    	GPIOB->BSRR |= LCD_D4_RESET;
 80003b0:	4a04      	ldr	r2, [pc, #16]	@ (80003c4 <lcd_command+0x128>)
 80003b2:	6991      	ldr	r1, [r2, #24]
 80003b4:	2380      	movs	r3, #128	@ 0x80
 80003b6:	045b      	lsls	r3, r3, #17
 80003b8:	430b      	orrs	r3, r1
 80003ba:	6193      	str	r3, [r2, #24]
 80003bc:	e7bd      	b.n	800033a <lcd_command+0x9e>
 80003be:	46c0      	nop			@ (mov r8, r8)
 80003c0:	48000800 	.word	0x48000800
 80003c4:	48000400 	.word	0x48000400
 80003c8:	00000bb8 	.word	0x00000bb8

080003cc <init_LCD>:
{
 80003cc:	b510      	push	{r4, lr}
    RCC->AHBENR |= RCC_AHBENR_GPIOAEN;	// Connect clocks to GPIO A, B and C
 80003ce:	4b1b      	ldr	r3, [pc, #108]	@ (800043c <init_LCD+0x70>)
 80003d0:	6959      	ldr	r1, [r3, #20]
 80003d2:	2280      	movs	r2, #128	@ 0x80
 80003d4:	0292      	lsls	r2, r2, #10
 80003d6:	430a      	orrs	r2, r1
 80003d8:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 80003da:	6959      	ldr	r1, [r3, #20]
 80003dc:	2280      	movs	r2, #128	@ 0x80
 80003de:	02d2      	lsls	r2, r2, #11
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
    RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 80003e4:	6959      	ldr	r1, [r3, #20]
 80003e6:	2280      	movs	r2, #128	@ 0x80
 80003e8:	0312      	lsls	r2, r2, #12
 80003ea:	430a      	orrs	r2, r1
 80003ec:	615a      	str	r2, [r3, #20]
    GPIOA->MODER |= (GPIO_MODER_MODER12_0|GPIO_MODER_MODER15_0); // D6 and D7
 80003ee:	2290      	movs	r2, #144	@ 0x90
 80003f0:	05d2      	lsls	r2, r2, #23
 80003f2:	6811      	ldr	r1, [r2, #0]
 80003f4:	2382      	movs	r3, #130	@ 0x82
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	430b      	orrs	r3, r1
 80003fa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER8_0|GPIO_MODER_MODER9_0);   // D4 and D5
 80003fc:	4a10      	ldr	r2, [pc, #64]	@ (8000440 <init_LCD+0x74>)
 80003fe:	6811      	ldr	r1, [r2, #0]
 8000400:	23a0      	movs	r3, #160	@ 0xa0
 8000402:	02db      	lsls	r3, r3, #11
 8000404:	430b      	orrs	r3, r1
 8000406:	6013      	str	r3, [r2, #0]
    GPIOC->MODER |= (GPIO_MODER_MODER14_0|GPIO_MODER_MODER15_0); // RS and EN
 8000408:	4a0e      	ldr	r2, [pc, #56]	@ (8000444 <init_LCD+0x78>)
 800040a:	6811      	ldr	r1, [r2, #0]
 800040c:	23a0      	movs	r3, #160	@ 0xa0
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	430b      	orrs	r3, r1
 8000412:	6013      	str	r3, [r2, #0]
    delay(30000);			// Allow the LCD some power up time (~30ms)
 8000414:	480c      	ldr	r0, [pc, #48]	@ (8000448 <init_LCD+0x7c>)
 8000416:	f7ff fe77 	bl	8000108 <delay>
    lcd_command(POWER_UP);		// Power up initialization for the lcd
 800041a:	2033      	movs	r0, #51	@ 0x33
 800041c:	f7ff ff3e 	bl	800029c <lcd_command>
    lcd_command(FOURBIT_MODE);		// Set LCD into 4 bit mode
 8000420:	2032      	movs	r0, #50	@ 0x32
 8000422:	f7ff ff3b 	bl	800029c <lcd_command>
    lcd_command(DISPLAY_ON);		// Turn display on and set up cursor
 8000426:	200c      	movs	r0, #12
 8000428:	f7ff ff38 	bl	800029c <lcd_command>
    lcd_command(TWOLINE_MODE);		// Set up 2 lines and character size
 800042c:	2028      	movs	r0, #40	@ 0x28
 800042e:	f7ff ff35 	bl	800029c <lcd_command>
    lcd_command(CLEAR);			// Clear display
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff32 	bl	800029c <lcd_command>
}
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	40021000 	.word	0x40021000
 8000440:	48000400 	.word	0x48000400
 8000444:	48000800 	.word	0x48000800
 8000448:	00007530 	.word	0x00007530

0800044c <helloWorld>:

//====================================================================
// FUNCTION DEFINITIONS
//====================================================================

void helloWorld(){
 800044c:	b510      	push	{r4, lr}
    init_LCD();
 800044e:	f7ff ffbd 	bl	80003cc <init_LCD>
    lcd_command(CLEAR);
 8000452:	2001      	movs	r0, #1
 8000454:	f7ff ff22 	bl	800029c <lcd_command>
    lcd_putstring("Hello world! :)");
 8000458:	4801      	ldr	r0, [pc, #4]	@ (8000460 <helloWorld+0x14>)
 800045a:	f7ff ff13 	bl	8000284 <lcd_putstring>
}
 800045e:	bd10      	pop	{r4, pc}
 8000460:	0800052c 	.word	0x0800052c

08000464 <main>:
{
 8000464:	b510      	push	{r4, lr}
    helloWorld();
 8000466:	f7ff fff1 	bl	800044c <helloWorld>
    while (1){
 800046a:	e7fe      	b.n	800046a <main+0x6>

0800046c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800046c:	e7fe      	b.n	800046c <NMI_Handler>

0800046e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046e:	e7fe      	b.n	800046e <HardFault_Handler>

08000470 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000470:	4770      	bx	lr

08000472 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000472:	4770      	bx	lr

08000474 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000474:	4770      	bx	lr

08000476 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000476:	4770      	bx	lr

08000478 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000478:	480d      	ldr	r0, [pc, #52]	@ (80004b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800047a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800047c:	f7ff fffb 	bl	8000476 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	@ (80004b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <LoopForever+0xe>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	@ (80004c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	@ (80004c4 <LoopForever+0x16>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004a6:	f000 f811 	bl	80004cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004aa:	f7ff ffdb 	bl	8000464 <main>

080004ae <LoopForever>:

LoopForever:
    b LoopForever
 80004ae:	e7fe      	b.n	80004ae <LoopForever>
  ldr   r0, =_estack
 80004b0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004bc:	08000544 	.word	0x08000544
  ldr r2, =_sbss
 80004c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004c4:	2000001c 	.word	0x2000001c

080004c8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC1_COMP_IRQHandler>
	...

080004cc <__libc_init_array>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	2600      	movs	r6, #0
 80004d0:	4c0c      	ldr	r4, [pc, #48]	@ (8000504 <__libc_init_array+0x38>)
 80004d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000508 <__libc_init_array+0x3c>)
 80004d4:	1b64      	subs	r4, r4, r5
 80004d6:	10a4      	asrs	r4, r4, #2
 80004d8:	42a6      	cmp	r6, r4
 80004da:	d109      	bne.n	80004f0 <__libc_init_array+0x24>
 80004dc:	2600      	movs	r6, #0
 80004de:	f000 f819 	bl	8000514 <_init>
 80004e2:	4c0a      	ldr	r4, [pc, #40]	@ (800050c <__libc_init_array+0x40>)
 80004e4:	4d0a      	ldr	r5, [pc, #40]	@ (8000510 <__libc_init_array+0x44>)
 80004e6:	1b64      	subs	r4, r4, r5
 80004e8:	10a4      	asrs	r4, r4, #2
 80004ea:	42a6      	cmp	r6, r4
 80004ec:	d105      	bne.n	80004fa <__libc_init_array+0x2e>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	00b3      	lsls	r3, r6, #2
 80004f2:	58eb      	ldr	r3, [r5, r3]
 80004f4:	4798      	blx	r3
 80004f6:	3601      	adds	r6, #1
 80004f8:	e7ee      	b.n	80004d8 <__libc_init_array+0xc>
 80004fa:	00b3      	lsls	r3, r6, #2
 80004fc:	58eb      	ldr	r3, [r5, r3]
 80004fe:	4798      	blx	r3
 8000500:	3601      	adds	r6, #1
 8000502:	e7f2      	b.n	80004ea <__libc_init_array+0x1e>
 8000504:	0800053c 	.word	0x0800053c
 8000508:	0800053c 	.word	0x0800053c
 800050c:	08000540 	.word	0x08000540
 8000510:	0800053c 	.word	0x0800053c

08000514 <_init>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr

08000520 <_fini>:
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000526:	bc08      	pop	{r3}
 8000528:	469e      	mov	lr, r3
 800052a:	4770      	bx	lr
